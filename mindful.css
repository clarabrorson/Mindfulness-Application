
@import url('https://fonts.googleapis.com/css?family=Poppins&display=swap');

/* This border-box property is used to include the padding and border in the element's total width and height.
   In this case it is used to avoid the overflow of the page when the modal is opened.
*/
* {
  box-sizing: border-box;
}

/* This is the body of the page. It has a background image and the text is styled with the Poppins font.*/
body {
  background: #224941 url('forest-6761846.jpg') no-repeat center center/cover;
  color: #fff;
  font-family: 'Poppins', sans-serif;
  min-height: 100vh;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0;
  font-weight: bold;
}

/*
BREATHING CIRCLE ANIMATION
The container and circle classes are for the breathing circle, and the pointer and pointer-container classes are for the rotating pointer.
The keyframes are defining the animations for the circle to grow and shrink, and for the pointer to rotate.
*/

.container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: auto;
  height: 300px;
  width: 300px;
  position: relative;
  transform: scale(1);
}

.circle {
  background-color: #031210;
  height: 100%;
  width: 100%;
  border-radius: 50%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  box-shadow: 0px 0px 25px 3px rgba(247, 245, 246, 0.8);

}

.pointer {
  background-color:#fff;
  border-radius: 50%;
  height: 20px;
  width: 20px;
  display: block;
  box-shadow: 0px 0px 70px 30px rgba(255, 0, 128, 0.8);
}

.pointer-container {
  position: absolute;
  top: -40px;
  left: 140px;
  width: 20px;
  height: 190px;
  animation: rotate 7.5s linear forwards infinite;
  transform-origin: bottom center;

}
/* @Keyframes are used to create animations in CSS. 
   In this case, the rotate animation is used to make the pointer rotate around the circle.
   The from and to properties are used to define the start and end of the animation.
   This animation will rotate the pointer 360 degrees.
*/

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

/* This grow animation is used to make the circle grow.
   The from and to properties are used to define the start and end of the animation.
   This animation will make the circle grow to 20% of its original size.
*/
.container.grow {
  animation: grow 3s linear forwards;
}

@keyframes grow {
  from {
    transform: scale(1);
  }

  to {
    transform: scale(1.2);
  }
}

/* This shrink animation is used to make the circle shrink.
   The from and to properties are used to define the start and end of the animation.
*/
.container.shrink {
  animation: shrink 3s linear forwards;
}

@keyframes shrink {
  from {
    transform: scale(1.2);
  }

  to {
    transform: scale(1);
  }
}

/* MODAL
This is the CSS code for the modal. The modal class is for the modal itself, 
the modal-content class is for the content inside the modal, and the close class is for the close button.
*/
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 20%;
  top: 80%;
  transform: translate(-50%, -50%);
  width: 30%; 
  height: auto;
  overflow: auto;
  background-color:rgba(0,0,0,0.4); 
  border-radius: 20px;
}

.modal-content {
  position: relative;
  background-color: #120808;
  margin: auto;
  padding: 20px;
  border: 1px solid rgba(255, 0, 128, 0.8);
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;

}

.close-myModal, .close-myModalQuotes {
  color: #f5f1f1;
  position: absolute; 
  top: 0px; 
  right: 10px; 
  font-size: 20px;
  font-weight: 300;
  cursor: pointer; 
}

/* MODAL FOR QUOTES */
/* This modal classes are for the modal that appears when the bug is clicked.
  The modalQuotes class is for the modal itself and the modalQuotes-content class is for the content inside the modal.
*/

.modalQuotes {
  display: none;
  position: fixed;
  z-index: 1;
  right: -10%;
  top: 80%;
  transform: translate(-50%, -50%);
  width: 30%; 
  height: auto;
  overflow: auto;
  background-color:rgba(0,0,0,0.4);
  border-radius: 20px;
  overflow: hidden;
}

.modalQuotes-content {
  background-color: #120808;
  margin: auto;
  padding: 20px;
  border: 1px solid rgba(255, 0, 128, 0.8);
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

#myModalQuotes {
  font-family: 'Poppins', sans-serif;
  font-weight: 100;
  font-style: italic;
}
/* This class is connected to the div that holds the quotes. It is used to center the text. 
  The flex properties allow the div to behave like a flex container */
.quoteContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.quoteContainer p {
  text-align: center;
}

/* MENU
This code styles the menu and the menu items.
The menu class is for the menu itself, the menu-bar class is for the menu bar icon, and the menu-items class is for the menu items.
 */
#menu {
  position: fixed;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  width: 200px;
  height: 100vh;
  z-index: 1000;
}

.menu-bar {
  width: 15%;
  height: 2px;
  background-color: #fff;
  margin: 4px 0;
  cursor: pointer;
}

#menu-items {
  display: none;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

#menu-items a {
  color: #fff;
  text-decoration: none;
  margin: 20px 0;
  text-align: left;
  width: 100%;
  display: block;
  font-weight: 100;
}

.yoga {
  color:  rgba(255, 0, 128, 0.8) !important; 
  font-weight: 1000 !important;
  font-size: 20px; 
}


/* PLAY BUTTON
This code styles the play button.
Radial gradient is used to create the button, and a triangle is created using borders.
The box-shadow property is used to create a glowing effect.
*/

.play-btn {
  width: 60px; 
  height: 60px; 
  background: radial-gradient( rgba(255, 0, 128, 0.8) 60%, rgba(255, 255, 255, 1) 62%);
  border-radius: 50%;
  position: fixed; 
  top: 20px; 
  right: 20px; 
  box-shadow: 0px 0px 25px 3px rgba(255, 0, 128, 0.8);
}

/* Triangle on play button
The pseudo-element ::after is used to create the triangle on the play button.
The different properties are used to create the triangle shape and style it.
*/

.play-btn::after {
  content: "";
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%); 
  transform: translateX(-50%) translateY(-50%); 
  transform-origin: center center;
  width: 0;
  height: 0;
  border-top: 10px solid transparent; 
  border-bottom: 10px solid transparent; 
  border-left: 15px solid #fff; 
  z-index: 100;
  -webkit-transition: all 400ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
  transition: all 400ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
/*BACKGROUD SELECT*/

/*This container is used to hold the background buttons.
  It is positioned fixed on the top right corner of the screen.
 */
.background-select-container {
  position: fixed;
  top: 80px;
  right: 20px;
  background: transparent;
}

/* These are the background buttons. They are used to change the background image of the page.
   It is styled with a radial gradient to create a glowing effect.
   The box-shadow property is used to create a glowing effect.
 */
.bg-btn {
  width: 60px; 
  height: 60px; 
  background: radial-gradient( rgba(20, 18, 19, 0.8) 60%, rgba(0, 0, 0, 0) 62%);
  border-radius: 50%;
  position: relative; 
  margin-top: 10px;
  left: 10px;
  box-shadow: 0px 0px 25px 3px rgba(232, 220, 226, 0.8);
  color: #fff;
  border: none;
  font-size: 10px;
  text-align: center;
  padding: 15px;
  margin: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}
/*
This is the last child of the background buttons
It corrects the position of the last button, wich was a little off compared to the others.
*/
.bg-btn:last-child {
  position: relative;
  top: -4px;
}

/* BUG ANIMATION 
  The bug animation is a simple image that works as a button.
  When hovered a tooltip appears with a message. If clicked, a modal with a quote appears.
  The Quotes are called from an API and are displayed in the modal.
*/

/* Tooltip container */
.tooltip {
  position: fixed;
  display: inline-block;
  bottom: 10px;
  right: 10px;
  cursor: pointer;

}

/* Tooltip text */
.tooltip .tooltiptext {
  visibility: hidden;
  width: 150px; 
  background-color: transparent;
  color: #fff;
  text-align: center;
  padding: 20px 0; 
  border-radius: 5px; 
  font-size: 16px; 
  font-weight: 300;
  position: absolute;
  z-index: 1;
  bottom: 100%; 
  left: -200%;
  margin-left: -0px; 

  /* Function to make the tooltip appear */
  opacity: 0;
  transition: opacity 0.3s;
} 

/* Shows the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
  visibility: visible;
  opacity: 1;
} 





